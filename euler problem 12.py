#!/usr/bin/env python
# encoding: utf-8
"""
euler problem 12.py

Copyright (c) 2013 . All rights reserved.

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

from sympy import *

# Acquire triangle value for any value of n. Euler, of course.
v = lambda n: (n*(n+1))/2

# Find factors of a number, return the number of factors as we don't care about what they are.
def factors(n):    
    return len(set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))

# Grab the number of factors of a triangle number, run until that number of factors is 500. Spit out the triangle number.
def triangleNumber():
	i = 1
	while factors(v(i)) <= 500:
		i = i + 1
		
	print v(i)

# Run ze code.
triangleNumber()
